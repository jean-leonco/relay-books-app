"""The root of all queries."""
type Query {
  """The ID of an object"""
  id: ID!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """Me is the logged User"""
  me: User

  """Connection to all books"""
  books(after: String, first: Int, before: String, last: Int, filters: BookFilters): BookConnection!

  """Connection to all reviews"""
  reviews(after: String, first: Int, before: String, last: Int, filters: ReviewFilters): ReviewConnection!

  """Connection to all categories"""
  categories(after: String, first: Int, before: String, last: Int, filters: CategoryFilters): CategoryConnection!

  """Connection to all me readings"""
  readings(after: String, first: Int, before: String, last: Int, filters: ReadingFilters): ReadingConnection!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!

  """The user name. Ex: Jean."""
  name: String

  """The user surname. Ex: Leonço."""
  surname: String

  """The user full name. Ex: Jean Leonço."""
  fullName: String

  """The user email. Ex: jean@booksapp.com."""
  email: String

  """If the user email was verified."""
  emailWasVerified: String

  """The user language. Ex: en."""
  lang: String

  """Connection to all me reviews."""
  reviews(after: String, first: Int, before: String, last: Int, filters: ReviewFilters): ReviewConnection!

  """The last incomplete reading."""
  lastIncompleteReading: Reading

  """If user has a reading."""
  hasReading: Boolean
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type ReviewConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review

  """A cursor for use in pagination."""
  cursor: String!
}

"""Review data"""
type Review implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!

  """The user who created this review."""
  user: User

  """The book rated on this review."""
  book: Book

  """The rating of the review. ex: 4.5"""
  rating: Float

  """The review description. ex: This book is awesome"""
  description: String
  createdAt: String
  updatedAt: String
}

"""Book data"""
type Book implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!

  """The book name. ex: O Alienista"""
  name: String

  """The book author. ex: Machado de Assis"""
  author: String

  """The book description."""
  description: String

  """The book release year. ex: 1882"""
  releaseYear: Int

  """The book total page. ex: 96"""
  pages: Int

  """The book banner url."""
  bannerUrl: String

  """The book banner ISBN. ex: 9780850515060"""
  ISBN: Int

  """The book language. ex: Portuguese"""
  language: String

  """The book average rating based on user reviews"""
  rating: Float

  """The book reviews"""
  reviews(after: String, first: Int, before: String, last: Int, filters: ReviewFilters): ReviewConnection

  """Retuns if the context user can review the book"""
  meCanReview: Boolean
  createdAt: String
  updatedAt: String
}

"""Used to filter reviews"""
input ReviewFilters {
  OR: [ReviewFilters]
  AND: [ReviewFilters]

  """Order reviews by ReviewOrderingInputType."""
  orderBy: [ReviewOrdering!]

  """Filter by book."""
  book: ID

  """Filter by user."""
  user: ID
}

"""Used to order reviews."""
input ReviewOrdering {
  """the field used to sort. Ex: CREATED_AT."""
  sort: ReviewSortEnumType!

  """the direction used to sort. Ex: ASC."""
  direction: DirectionEnum!
}

enum ReviewSortEnumType {
  """The rating of the review. ex: 4.5"""
  RATING

  """The creation date."""
  CREATED_AT

  """The last date that the document was updated"""
  UPDATED_AT
}

enum DirectionEnum {
  ASC
  DESC
}

"""Reading data"""
type Reading implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!

  """The book being read."""
  book: Book

  """The total read pages. ex: 50"""
  readPages: Int
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type BookConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BookEdge]!
}

"""An edge in a connection."""
type BookEdge {
  """The item at the end of the edge."""
  node: Book

  """A cursor for use in pagination."""
  cursor: String!
}

"""Used to filter books"""
input BookFilters {
  OR: [BookFilters]
  AND: [BookFilters]

  """Order reviews by StatusDateOrderingInputType."""
  orderBy: [StatusDateOrdering!]

  """Filter by search string. Name, author or description."""
  search: String

  """Filter by category."""
  category: ID

  """Filter by trending."""
  trending: Boolean
}

"""Used to order by createdAt or updatedAt."""
input StatusDateOrdering {
  """the field used to sort. Ex: CREATED_AT."""
  field: StatusDateSortEnumType!

  """the direction used to sort. Ex: ASC."""
  direction: DirectionEnum!
}

enum StatusDateSortEnumType {
  """The creation date."""
  CREATED_AT

  """The last date that the document was updated"""
  UPDATED_AT
}

"""A connection to a list of items."""
type CategoryConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CategoryEdge]!
}

"""An edge in a connection."""
type CategoryEdge {
  """The item at the end of the edge."""
  node: Category

  """A cursor for use in pagination."""
  cursor: String!
}

"""Category data"""
type Category implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!

  """The category name. ex: Horror"""
  name: String

  """The category key. ex: horror"""
  key: String
  createdAt: String
  updatedAt: String
}

"""Used to filter categories"""
input CategoryFilters {
  OR: [CategoryFilters]
  AND: [CategoryFilters]

  """Order reviews by StatusDateOrderingInputType."""
  orderBy: [StatusDateOrdering!]
}

"""A connection to a list of items."""
type ReadingConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReadingEdge]!
}

"""An edge in a connection."""
type ReadingEdge {
  """The item at the end of the edge."""
  node: Reading

  """A cursor for use in pagination."""
  cursor: String!
}

"""Used to filter readings"""
input ReadingFilters {
  OR: [ReadingFilters]
  AND: [ReadingFilters]

  """Order reviews by StatusDateOrderingInputType."""
  orderBy: [StatusDateOrdering!]

  """Filter by book finished status."""
  finished: Boolean

  """Filter by book."""
  book: ID
}

type Mutation {
  UserLogin(input: UserLoginInput!): UserLoginPayload
  UserRegistration(input: UserRegistrationInput!): UserRegistrationPayload
  MeEdit(input: MeEditInput!): MeEditPayload
  ReviewAdd(input: ReviewAddInput!): ReviewAddPayload
  ReviewEdit(input: ReviewEditInput!): ReviewEditPayload
  ReviewRemove(input: ReviewRemoveInput!): ReviewRemovePayload
  ReadingAdd(input: ReadingAddInput!): ReadingAddPayload
  ReadingEditPage(input: ReadingEditPageInput!): ReadingEditPagePayload
  ReadingRemove(input: ReadingRemoveInput!): ReadingRemovePayload
}

type UserLoginPayload {
  token: String

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input UserLoginInput {
  """User email to be used on login. ex: jean@gmail.com"""
  email: String!

  """User password."""
  password: String!
  clientMutationId: String
}

type UserRegistrationPayload {
  token: String

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input UserRegistrationInput {
  """User name. ex: Jean"""
  name: String!

  """User email to be used on login. ex: jean@gmail.com"""
  email: String!

  """User password."""
  password: String!
  clientMutationId: String
}

type MeEditPayload {
  me: User

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input MeEditInput {
  """User name. ex: Jean"""
  name: String

  """User email to be used on login. ex: jean@gmail.com"""
  email: String

  """User password."""
  password: String
  clientMutationId: String
}

type ReviewAddPayload {
  reviewEdge: ReviewEdge

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input ReviewAddInput {
  """The book rated on this review."""
  bookId: ID!

  """The rating of the review. ex: 4.5"""
  rating: Float!

  """The review description. ex: This book is awesome"""
  description: String
  clientMutationId: String
}

type ReviewEditPayload {
  reviewEdge: ReviewEdge

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input ReviewEditInput {
  """The global review id."""
  id: ID!

  """The rating of the review. ex: 4.5"""
  rating: Float

  """The review description. ex: This book is awesome"""
  description: String
  clientMutationId: String
}

type ReviewRemovePayload {
  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input ReviewRemoveInput {
  """The global review id."""
  id: ID!
  clientMutationId: String
}

type ReadingAddPayload {
  readingEdge: ReadingEdge

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input ReadingAddInput {
  """The book being read global id."""
  bookId: ID!
  clientMutationId: String
}

type ReadingEditPagePayload {
  readingEdge: ReadingEdge

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input ReadingEditPageInput {
  """The global Reading id."""
  id: ID!

  """The current user page. ex: 2"""
  currentPage: Int
  clientMutationId: String
}

type ReadingRemovePayload {
  deletedID: String

  """Default success field resolver."""
  success: Boolean

  """Default error field resolver."""
  error: String
  clientMutationId: String
}

input ReadingRemoveInput {
  """The global Reading id."""
  id: ID!
  clientMutationId: String
}
